import { exec } from "./base.js";


const rawinput = `.##.####.#.#..###....##.....#.#.#.###.#####..#..#...#..#.##.##.#..#####.#.
#.#..####..#...#.####..#.#..##.###..#.#...#.#..##..##.#...#..#####.#.####.
.#.#.####..##.##.#..###..#..#...#.##..#.#.###....####..#..#.#...#.#..##...
#..###..#..#.#.##.#...#.#.#.#.#....##..##.##.##...#..##.....##...#...##...
#...##..#.####.#.#.#########.###..#.##.####.#.###..##..#.#.#.#..#.######..
#.#..##..#.###.##..#.#....#####...##.....#...#.#....#.###.#.#.#..##..#####
#..###.##.#.##..#..#.##...##.##.##....#..#...#.##.#.#.#..#.###.#...#..###.
.###.##.#..##...###...#.#.#..######..##..###..###....#...#.#.##.#.#.#..#..
.#.#.##.#####..####..###..###.#..######...........##......#...#..##..#....
###.#....##.#.#.#.#...#.##.##...######.##.#..#####.##.##...#....##....###.
####.##..#.###....#.##.#..#.#..##.##..#.####...#.###...###..#..##..#....##
......#....##.#..#.##...#...##....#.###.#.#.####.###...#..###....#..#.#...
............#.###.##...#.#...##.#...#.####......#.###..####.######.#....##
.##.#.#..#.####..#####.....#..#.#..##..#.##.#..##.#.#.#..#.#.###..####.###
.###...###.#.#.###.##..##.#..###...#####..#.....#...#.##.##...#.##...#####
##..##...#...#.....#.#.####......#..#..#..#...#.#.##.##.#####.#.###.#...##
..##.#..#..##.#....##.##.#......######....#.##.#.####..#...###.####.#.#..#
..#..##...#...###.....#.##..#..##..#.##..#..###..#..#.#..#...#...##..#.#..
#...###...####.#.#..##.##.#.#.##..#.#.#.#..##.###..##..#..####.#..####.##.
###..#.#..###.###.######.#..#.###.......######.####.###...##.#.##.##..###.
#.###.#...#.####.#.####..##..###....#####..#.#.###..#.##.###..#..####.#...
#.######..##..##.#######.#.#.##..##.###########.#.##.###...........#....##
#.####...##..#.##...##.#..##.#..#.####.#.#.##..#..##.####...#...#..#.####.
.#####.###.#.#....###.#...#.####...#.###...#..##.#.#.####..#....#######...
#...#.#.##.......#.###..###....###.#..#..#...###...###...##....#...######.
..##..##....#.#..########....#..#.#....###.#..#..#..#..##.......##....#..#
.###...##....##..#..##...##..#..###..##.#..##...##..##...##....##...#.##.#
.#...#..#..#..##..#..#####..#..##.##.#.#.#.####.#..###.###...#...#..#.####
#.#.#.#.#..##..##..#.######.###..#..####.##..####.#..#...#...##.#..###....
.##..####.##.#.####.#..#.####..#.#.#.###.###..#.#.#.#..##....##.###.##..#.
.#.#.#.....###.#######.....###..#.####.#.#.##...#.######.#.#..###.##.#.#.#
.#.#......#.....##.##.###.#..###...####...#.#.#..###.####..#..#.#.####.#.#
#...###......########....#######.....#..##.#...#...####..#.#..#..#.##.#..#
.#.#.#..##..##...#.#..##.##.#.##.#####.#..#.#.#.#.#..##...##.####....###..
#..#....##....#.#.#####..###.#..........###.......#.###.#.#.#.#######.###.
#.###.##..#......##.#.#.##.#....###...#...####.##.##...#.##..#.#.#######.#
###....#...###.##.##.#..###.#.####.##..#...####.##..#.###.#..#..#.#.#..#.#
.##...##......#.#####.....#.######.#.#..#...###..##.###..##..#.###.#.#.#..
.#.##...##..#....#...#..#..##...###.#.#.####..##...#..#....#..###.#..##..#
..##....#....######..#..#.###.#....##.###.###....##...##.##.#..#..##.....#
##..#.#.##.#....#..###..##.#.#.###.#.#######.#.#.####.#....##...#.#.###...
#...##.#...####...##..#..#....#..##...#...#.#....#..#..##..#..#..##.#.....
#.#.#.####......###....#...#..#.#.#######.#..#..##.....#...#....#..###..#.
#.##.##..##.#.#..#...#....####.##..#.#.##..#..##.####..#.#..#....#.##.#..#
..####.##.#####...#.##.#...##.##.##.##.#..##..#.##.##..###..##..##....###.
..##...#.#.#....#.#.#.###....#.#.#..######.#.##..###....#.####..###..##..#
.#.....##.#..#.#.##..##.##.#...#.###.###.##.#..###.#.......#.#.#..#..#..#.
.....#.#.#.##.#.#..#....#####...#...##..####...#...#.#......#.#...#.#.####
#.#####......###..#......#.....#####..#...#.#.#..##.#..#...#....##..#.##..
.##.###.###..###...#..########.#.#.##...##.##..##....#....#..#.#.####.##.#
#.##....#...#.#...#......###.#.#.....#.#.###.####.##.###...##...##...#.##.
..##.###.#.#...#...##...##..#####...#.####.##..###.#.#...#..#.......###.#.
.####.###..##.#..#..#..#.#...#...#..#......#.##.#.##.#.###.#.#..#.##.###..
..#####..#.#.......#.####.#.#.#.#...##.....###..#..###...##.##.#########.#
#.#..#.#.#..##..#........##..#..#.##.#.#...#.##.#.##...####.###.###.#.#.#.
...#..###.#.#.###.##..#.#...#.#.#.##....#.#..####.#.##.##.###.###.##.##.##
#.#.#.#...#.#.##.#.##.#.....####........#..########...#.##.########.#...##
...####......###.#...###..##.#.#.#####..#....##.#.#.##.#######.#......##..
##.##.##.##......###.#.##..##.##..#...#.##.#.#.##.#.....#...#.#........#..
#..###...#.#..#####.#.#####....#..###.....#.#..######...#.#####...##..#.##
#...#..#..#...#.#.#..#..##...#.#..#.....###..####..#......#.#...#.#.#.#.#.
...###.#.#...####....#.#...#.##..##.#.##.#..##..#...#.#.##..#.#..........#
###......#############..#.##..#....##....#...#.#...##..##..##..##.##.#...#
.#..##.##..#.####.#..###..###.#...#.##.##..#.#.#.##.#..........##...###.#.
#.##.#####..#.##.#.#####......#....###.#.....###.#......#....##.#####.##.#
###.....#.#...######.##.#..##.#....#...#..#.###.###.##.##........#.#..#..#
..####.#.##.#.###.##...##.#.#...#.##.##.####.##...#....#...#..##..###...#.
#..#.##.#.##.###.####.#.#.###.####.#..##..####.#.#.#.####.#.#.#....##..#.#
#.###.##..#.####.#....#..#....##.#..#..###....###..##.##....###...###.##.#
###.#..####..#.#......#...#.#..##.#######.#.#.###..#.#......###.##.#####..
#....#.....#.#.#..##.#...#......#.....#..#..##.###...######.#.##....####.#
..#.##..##.##.#..##.#.#.#####.#...#..#..#.#..#.#.#..#.##..##.............#
....#.#.#.#....#......##.###.#.###.##..####..#.#.##..#.###..####....##.#..
##...##...######.#.#.#.#.#.#..#....#..####...#.#.#.#.###.#.#.##.#.#.##..##`;

const testinput = `....#..
..###.#
#...#.#
.#...##
#.###..
##.#.##
.#..#..`;


const testing = false;
const logging = false;

(() => {
    exec(() => {
        let input = parseInput(testing ? testinput : rawinput);
        // console.log(input);
        part1(input[0], input[1]);
    });
})();


function part1(map, elves) {
    let round = 1;
    let moveOrder = ['n', 's', 'w', 'e'];
    while (true) {
        printMap(map, true);
        console.log('round', round);
        pause(0.01);

        // Each elf proposes a move
        elves.forEach(elf => {
            proposeMove(map, elf, moveOrder);
        });
        logging && console.log(elves);
        // Filter duplicate moves out
        elves.forEach(elf => {
            if (elf.move == null) return;

            let dupes = elves.filter(e => e.move
                && e.id != elf.id
                && e.move.x == elf.move.x
                && e.move.y == elf.move.y);
            if (dupes.length > 0) {
                logging && console.log('found duplicate move for', elf.move);
                elf.move = null;
                dupes.forEach(e => e.move = null);
            }
        });

        // Check if anyone's moving
        let movingElves = elves.filter(e => e.move != null);
        logging && console.log(movingElves, 'moving on round', round);
        if (movingElves.length == 0) break;


        elves.forEach(elf => {
            if (elf.move == null) return;

            map[elf.pos.y][elf.pos.x] = null;
            elf.pos = elf.move;
            map[elf.pos.y][elf.pos.x] = elf;
        });


        moveOrder.push(moveOrder.shift());
        round++;
    }

    console.log('elves found their final positions');

    let [minX, maxX, minY, maxY] = elves.reduce((a, e) => {
        if (e.pos.x < a[0]) a[0] = e.pos.x;
        if (e.pos.x > a[1]) a[1] = e.pos.x;
        if (e.pos.y < a[2]) a[2] = e.pos.y;
        if (e.pos.y > a[3]) a[3] = e.pos.y;
        return a;
    }, [9999, -999, 9999, -999]);
    printMap(map);
    let diffX = maxX - minX + 1;
    let diffY = maxY - minY + 1;
    console.log(`Total area: ${diffX} x ${diffY} `);
    console.log('open spaces: ', (diffX * diffY) - elves.length);
    console.log('round', round);
}



function proposeMove(map, elf, moveOrder) {

    elf.move = null;

    if (!hasAdjacentElf(map, elf))
        return;

    let p = elf.pos;
    for (let m of moveOrder) {
        // Move N
        if (
            m == 'n' &&
            getTileAt(map, p.x - 1, p.y - 1) == null &&
            getTileAt(map, p.x, p.y - 1) == null &&
            getTileAt(map, p.x + 1, p.y - 1) == null
        ) {
            elf.move = { x: elf.pos.x, y: elf.pos.y - 1 };
            break;

        }
        // Move S
        else if (
            m == 's' &&
            getTileAt(map, p.x - 1, p.y + 1) == null &&
            getTileAt(map, p.x, p.y + 1) == null &&
            getTileAt(map, p.x + 1, p.y + 1) == null
        ) {
            elf.move = { x: elf.pos.x, y: elf.pos.y + 1 };
            break;

        }
        // Move W
        else if (
            m == 'w' &&
            getTileAt(map, p.x - 1, p.y - 1) == null &&
            getTileAt(map, p.x - 1, p.y) == null &&
            getTileAt(map, p.x - 1, p.y + 1) == null
        ) {
            elf.move = { x: elf.pos.x - 1, y: elf.pos.y };
            break;
        }
        // Move E
        else if (
            m == 'e' &&
            getTileAt(map, p.x + 1, p.y - 1) == null &&
            getTileAt(map, p.x + 1, p.y) == null &&
            getTileAt(map, p.x + 1, p.y + 1) == null
        ) {
            elf.move = { x: elf.pos.x + 1, y: elf.pos.y };
            break;

        }
    }
    logging && console.clear();
    logging && console.log(elf.id, 'proposing move to', elf.move);
    logging && pause(0.1);
}

function pause(length = 1) {
    for (let i = 0; i < length * 1000000000; i++);
}

function hasAdjacentElf(map, elf) {
    let p = elf.pos;
    return (
        getTileAt(map, p.x - 1, p.y - 1) != null ||
        getTileAt(map, p.x, p.y - 1) != null ||
        getTileAt(map, p.x + 1, p.y - 1) != null ||
        getTileAt(map, p.x - 1, p.y) != null ||
        getTileAt(map, p.x + 1, p.y) != null ||
        getTileAt(map, p.x - 1, p.y + 1) != null ||
        getTileAt(map, p.x, p.y + 1) != null ||
        getTileAt(map, p.x + 1, p.y + 1) != null
    );
}

function getTileAt(map, x, y) {
    if (map[y] == undefined) {
        map[y] = {};
    }
    if (map[y][x] == undefined)
        map[y][x] = null;
    return map[y][x];
}


function printMap(map, clear = false) {
    //console.log(map);
    let [minY, maxY] = Object.keys(map).map(v => parseInt(v)).reduce((a, i) => {
        if (i < a[0]) a[0] = i;
        if (i > a[1]) a[1] = i;
        return a;
    }, [999, -999]);

    let [minX, maxX] = Object.keys(map).reduce((a, k) => {
        let [x, y] = Object.keys(map[k]).map(v => parseInt(v)).reduce((a, i) => {
            if (i < a[0]) a[0] = i;
            if (i > a[1]) a[1] = i;
            return a;
        }, [999, -999]);

        if (x < a[0]) a[0] = x;
        if (y > a[1]) a[1] = y;
        return a;
    }, [999, -999]);


    let output = '';
    for (let y = minY; y <= maxY; y++) {
        for (let x = minX; x <= maxX; x++) {
            if (map[y] == undefined || map[y][x] == undefined)
                output += '.';
            else output += '#';
            output += ' ';
        }
        output += '\n';
    }
    clear && console.clear();
    console.log(output);
}

function parseInput(input) {
    let rows = input.split('\n');
    let elfCount = 0;
    let output = {};
    let elves = [];
    rows.forEach((r, y) => {
        output[y] = {};
        for (let x = 0; x < r.length; x++) {
            if (r.charAt(x) == '#') {
                let elf = { id: elfCount++, pos: { x, y }, move: null, };
                elves.push(elf);
                output[y][x] = elf;
            }
            else
                output[y][x] = null;
        }
    });
    return [output, elves];
}