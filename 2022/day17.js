import { exec } from './base.js';


const rawinput = `>>><<<>>>><<<>>>><<<<>>><<<>><<<<><<<<>><<<<><<<><>>>><<<>>><<<<>>><>>>><<<>>>><>>><>>><<<<>>>><<>>><>>><>>>><<<<>>>><<<>>><>><<<>>><<<>>>><<<>>><>>>><<>>>><<<<>>><<>>>><<<>>>><>>><<<>><<>>>><<>>>><><<<>><<<>>>><><>>>><<><<<<>>>><<<>>>><<<><>>><<<>>>><<<>>><<<>><<<<>><<<<><<<>><<><>>><<<<>>>><<<<>><<>>>><<<<>><<<<>><<<<><<<>><<<>><<<>><<>><<>>><<<<>>><<<<>><<<><<<>><>>>><<<<>>><><<<<>><<<<><<><<<>>>><<<<>><>><<<<>>><<<>>>><<<>>><<<><<><<<>>>><<<<><><<<>>><<<<>>>><<<<>>><<<>>>><<<<><<<>>><<>><<<><>>>><<<<>>>><<<>><<<>>><<<><<<><<<<>>>><<>>>><<<>>>><><>>>><<>>>><<<>><>>>><<<<>>><<<><>>><<<><<<<>>><<<><<<>>><>>><<<>>>><>>><<<>><><>><<<<>><>>><>>>><<>><<<>><<>>><<>>>><<<<>>>><<<<>>>><<<>>><<>>>><<><<>>><<>>><<<<>>><<>><>>>><><><<<<>>>><<<<>><<<<><<<<>>>><<<>>><<><<<>>>><<><><<>>><<>><<<>>><>><<<>><<<<>>><><<>><<<>>><<<<>><>>><<>><>>><<<><>><<>>>><>>><<>>><<<<>><<<<>>>><>>><<<><<<<>>><<>>><>>><<<<>>>><<<<>><<<>>>><<>>><>>><>>><<<>><<<<>>><<<<>>>><>>><>>>><<<<><<><<<<>>>><>><>>>><<<><<<>>><>>><<<<><>>><<<>><<<>>><<<>>>><>>><>>>><<>><<>>><<<<>>>><><<<<>><<<>><<>>><>><><<>><<>>>><<<<>>>><<<>>><<>><>>><<<<><<<<>><<>>>><<<<>>>><<<>><><<<<>>>><><<<><<<<>>>><>>>><<<>>><<<<>>>><<<>>>><<>>>><<><<>><<<<>><<>>>><<<><<>><<<<>>><<<>>><<>>><<<>>>><<>>>><<>>><<<<>>><<<>>>><<>>>><<<<>>><<<>><<<>><<><<<<>><>><>><<<><<>>>><<<<><>>>><<<<><<>>><<>>>><<>>><>>><><<><<<<>>>><<>>>><<<>><<>>>><<<>>><<<>>><<<><<<<>><<<>><<<<><<>>><<<>>><<<>><<<>>>><<><>><<<><<<<>><<>><<<>><<<<>><<<>>>><>><<>>>><<<><<>>>><<<>>>><>>><<<>>>><<<<>>><<<><<>>><<<>>><<>><<>>>><<<<>>><<<><<<><>><>>><<<<><<<<><<<<>><<<<>>><<<<><<><<>>><<<<>><<<>><><>>>><>><<<<>><<>>>><><>>><><<>>><>><<<<>><>>><>><<<<><<<>>><>><<<>>>><><>>><<<>>>><<><><<<<>>><<>><<<>><<><<<<>>>><<>><>>><<>>><<>>>><<<>>><<>>>><<<<>>>><<<<>><<<<>>>><<<<>>><<<><<<>>><>>>><>>>><<<><<<<>>><><<<<>>>><>><<>>>><<<<>>><<>>><><<<<>>><<<<>>>><<<<>>>><<><>>>><<><<>>><<><<<<>>>><<<<>><<<><>>>><>>>><<>>><<<<><><<>>><<>>><><><><>>><<><<>>><>>><<<<>>>><><<<>>>><>>><<<>>><<<>>>><<<>>>><<>>><>>>><<>><<<>>><<<>><<<<><<>>>><<<<>>><<<<>>><>>><<<<>><<<<>><<<<>><<<><<<>>>><<<>>>><>>><<>><<<<><<<>>>><<<>>><<<<>>>><>><<<><<>>>><<>>><<<<>>><>>><<<>><<<<>>>><<<>><<<>>>><>>>><<<><<<<>>>><>>>><<<<>>>><<<<><<>>>><<>>><>>>><<<<>>><>>><>><<<>>><>>>><<<<>><<>>><<<>>>><<>>><<><<<<><<<>><<><<>><<<><<><<<<>><<<<><<><<>>><<<>><<>>>><<>>><<>>>><<<<>>><<<>>><<>>>><<>>>><<<<>>><><>>>><<>>>><<>><<>>><<<>><<<>><>>><<<>><<<>><<<>>><<<<><<<<>>><<<<>>>><<<>>><<>><<>>><<<><<><<>><<<<>><<><<<<>><<<<>>>><>>>><><<<>>>><<<<>>><>><<<>>>><<>>>><>>><<<>><>>>><>><>>>><<<<>>><<><><<<>>><<<<>>>><<<><>><>><<<>>>><>>>><>>>><><<<<>><<<<><><<<>>>><<>>><<<<>>><<<>>>><>>><<><<>>>><<>><<>><<<<>>>><<>>>><><<<<><<><<<<>><<>><<<<><<<><<<<>>>><<<>><<<<>><<<<>>>><<>>><<<>><>>><>>><<>><>>>><><<>><<<><<>>>><<>>><<>>><<>>><<<<>>>><<>>><>><>>><<<><<<>><<>>>><<<<>>>><<<<>>>><<>>><<<>>>><<<<>><<<<>>>><>>>><>>><>>>><<<<>><><<><<<<>>><<<>>><<>>>><>><><<<>>>><<<<>>>><<>><<>><<<><<<<><<<<>><<<<>>>><>>>><>>>><<>>><<<>>><<<>>>><<>><<<>><<<><>>><<>>>><<<><>>>><><<<<><<>><><>><>><<<>><<>>>><<>>><<<><<>>>><<<<>>>><>>>><<<<>>><<<<>>><<><<<<>><>>>><<>>>><>>>><<<>>><>><<<>><<><<<<>><<<>>>><<<<>><<<<>>><<<>>><<<>>>><<<<>>><<<>><<<<>>><<<>>>><>>>><<><>><<>>>><<<<>>><><<<<>>><><>>>><>><<<<>>><<<<>>>><<><<<>>><>>>><<<>><<>>>><<<<>><><<>>><<>>>><>><<<><<>>><<<>>><<<<>><><<><><<<<>><<<<>><<>>><<<>>>><<<<>><<<>><<<>>><<><<<<>>><<<>>><>><>>><>><>><<<<>>>><>><<<<>><<>>>><>>>><>>>><<<<>>><<<<><<>>><>>><<<<>>>><<<>>>><<>>>><<<><<<><<<<><>>>><<<>><<<>>>><<<<>><<>>><<<>>>><<<><<<>>><<><><<>>><<<>><<<<><<<<>>><<><<<>><><>>>><<>><<<<><<<<>><<<><<><<<<>>>><<>>>><<<<>><<<>>><<><>>>><<>><>><<<<>><<<>>>><>><<<<>>><><<<><<>>><>>>><<<<>>><<<><>>><>>>><<<<>>><<>><<>>><<<<><<<<>><<><<><<>><>>><<<>>>><>>><>>>><<<<><<>><>>><<<>>><>>>><<<<>>>><<>>><>>><<<<>>>><<>>>><<<>>><<<>>>><<<>><>>><<>>><<<><<<<>>>><<<>>><<>><<<<>><>>>><<>>><<<<>><<<>>>><<>>>><<>><><<<<>>><<<<>><<<>><<<<>>>><<>>><<><<>>><<>><>><>>>><<<<><<>>><<<<><<<<>><<><<>>><<<>>><<<<>><<<<>>><>><<<<>>><<<>>>><>>><>><<<>>><<>>>><<<<>>>><<>>><<<<>><<><>>><<>>><<<<>>><<<<><<>><<<<><<<>>>><<>>>><>><<<><<<<>>>><<<<>><<<<><<>>>><<<>>>><>>><>><<<<><<<<>>>><<<>>><<<>>>><><>>><<<<><<<<>>>><<<>>><<>>>><<><>><<><<<<>>>><>>>><<<>><<<>><<<<>>><<<<>><<<>><>>><<<>>>><<<<>><<<<>>>><<>>><<<>>>><<<<>>>><<<>><>><<>><><<<<>><<><><<>><<>><<<<>>><<>>>><<<<>>>><<><<<<>>>><<<>><<<<>>>><<<>>><<><>>>><<<>>><>>>><<<<>>>><>><<><<<<>>><<>>><<<<>><<<>>>><<>>>><<<><<<>>>><<<<><<<>><<<<>>><<<>><<<><<<>><>>><<<<>>><<<>>><<<>><<<>>>><<<<>>><<<<>>>><<<<>><<<<><<<>>><><<<>><<<>><<<>><<<>>><<<><<<>>>><<<>><<<<>>>><><<<<>><<<<>>><<<<>><<><<<>>>><>>><><<<<>>><>>><<<<>>>><<<<>>><<<>>>><><<>><><<><<<<><<<<>>><>><>>>><<<<><<<<>><<<><>>>><<>>><<><<>>><<>>>><<<<>>>><<><>>>><<<<><<>><<><<>><<<<>>><<<<>><<<<>>>><>><<><<<>>>><<<>><<>>>><<<><<<<>>>><<<>>><<>><<<>>>><<>><<<<>>>><<<<>><<<>>>><>><<<<><<<>>>><<<><<<>><>>><<>>>><<<<>>><<<><<><>><<><>><<<><><<<><<<<>>><<>><<<><<>><<<><<<>><<<>>><>>>><<<>>>><<<<>>>><<<>><>><<>>><<<><>>><<<>><<<><<>><>>>><><>>>><<<>>><<<>>>><>>><<<<>>><>>>><<<>>>><<>>><<>>>><<>><><>>>><<<>>>><>>><>><<>>><<>>>><>><<>>><<><>>>><<<>><<>>><><<<>><<>>>><<<<>>>><>>><<<<>><>>><<>><<><<<>>><>><<<><<>><<>>><<><><<<<>>>><<<>>><>>>><>><<<>>><<<>>><<<<>>>><><<<<>>><<<<><<<>><<<<>>>><>>>><<>><<<<>>>><<>>><>><<><<<>>><<<>>>><<<<>>><<<>>><>>><<<>>><<<<>><<<><<>>>><><<><<>><>><<<<>>>><>><<>><<<<>>><<>>>><<<>><<<>>><<<>>><<<<>>><<<<>>>><<<<>><>>>><<<<>>>><>>>><>>><<<<><<<<>>><><<>>><<>>>><<<<>><<<<>>><<<>><<<>>>><<<<>>><<<>>>><<<><>>>><>>><<>>>><<<><<<><>>>><<<>>>><<>>>><>>>><<><<<<>><<<<><>>>><<><<<<>>>><>>><<<<>>><<>>>><<<><<<<><><<>>><<<>>><<>><<<>>>><>>>><<<<>>>><<<>>><<<>><<><<<>>>><<<<>><<<>>><>>><>><<<>>>><<<<>>>><<><<<>>>><>>>><<<>>>><<>><<<<>>><<<>>><><><<<<>>>><<<>>>><><<>><<>>>><<<<>>>><<<><<>>>><>>><<<<>><<>><<<>><><<<<>>><><<<>>>><<<><<<>>><<<<>><<<<>>>><<<>>>><<>><<<>>><<<<>>><><<>><<<<>>>><<<<>>><<>>><<<<><>><>>><<<<><>>>><<>><>><<<>>>><<<>>><<>><<><>>>><<<>>>><<<<>>>><<>>>><<<<>>>><<<>>>><<<>><<<>>><>>><>>><>>>><<>>>><<<>>><<<<>>><<>><<<><<<<>><>>><<<>>><<<>>><><<>>><>>>><<<<>>><<>>>><<<>>>><<<<>>><<<<>>>><<<>>><<><<>>><<>>>><<<>>><<><<<>>>><><<<<><><<><<>><>>>><<>>><><<><<<<>>><<<>>><<<<>>>><>><<<<>><<<<>><<><<<>>><>>>><>>>><<<<>>>><<<<><><<<><>>><<<<>><>><><<<<>>><<<><<><<<<>><<><>>>><>>>><<<>>>><<><<>>><<>><<<<>>><<<<>>>><>>>><<<<>><<>>><<<>>>><<<>>>><<<>>>><<<<>>><<<><<<><>>><<<><>>><<<><>>><>><<<>>><<<>>><<<<>>>><<>><<<>><>><<<<>>><<<>>>><<><<<>>>><<<<><><>>>><<>><>>>><<>>><<>>>><<>>>><>>><>>><<<>>><<>>><>><>>>><<<>>><>><>>>><<<>>><<><<<>>>><<<>><<><<<>>><<<<>>><<<<><<<<>>>><<<>><<<<>>><<<<>>><<>><<<<><<<><<<<>>>><<<<><>>>><>>>><<><<<<>><<>><<>>><>>><>>>><<<>>>><>><<<<>>>><<<<>><<<<>><<<>><<<<><>>>><>><<<>>><>><>>><>>><<<<>>><<>><<<>>><<<<>>><<><<<>>><<<>>>><<>>><<<<>><<<<>>><<><<>>><<<<>>><<<>>><<<<>>><<>>><<<>><<<>>>><<<>><<<<>>>><<>><>>>><<>>><>><<<>><<<<>>>><<>><<<<><<<>>>><<<>>><<>><<<>>>><<>>><<<<>><<>><<>><<<<>>>><<<>>><<<<>>>><<<>>><>>>><<<>>>><<>><<<<>><<>>>><<<<><<<>><<<<><<>>>><<<<>>>><<>>><<<<><<<>>>><<<>><<><<<<><><<>>>><><<<<><<<><<<<>><<><<<<><<<<>><<<>><<>><<<<><<>>><<><<<>><<>>><<<>>>><<>><<>><<<<>>><<<<>><<>>>><<<>>><<<<>><<>>><<><><<><<>>>><>><>>><<<><<<<>><<><<>>><<<<><<>>><>>>><<<><<><<>>>><><>>>><<>><<><>>><<><<<<>><<>>>><<>>><<<>>>><<<><>>><<>>>><>><<><<>><<<><<<>><<>><>><><><<>>>><<<>>><>>><<<<>>><<<>>><<<>><>>><<<<>><><<<><>>>><<>>><>>><<<>>><<<>><>>>><<>>><<<><<<>>>><><<<<>>><<<<>><<>><<<><<<<>><<<>>>><<<><>><<<<><<<<>>><<<>>>><<<<><<<>>><>>>><<<<>>><<><<>>>><<><<>><<>><>><<>>>><<<<>>><>>>><<>>>><<><<<>>><>>><<<>>>><<<<>><<<<><<<><<<><<<><<<>>>><<><<><><>><>>><<<>><>>><<<><>>><<>>><<<<><<<>>><<<<>>><<<<>>><<>>>><<<>>>><<<>><<<<><<<<>><<<><<<><<<>><<>>>><<<>><<<><>>><>>><<><<<>>><<<<>><<<>>>><>><<<>><>>><><<<><<<<><<<><<<>>><<><<>>>><<>>><><<<<>>>><<<>>>><<>><<<>><<>>><<><<<>><<>><<>><<<<>><<<<>><<<>>>><>>>><<>>><<<<><<>><<<>><<>>>><<<<>>><>><>><<<>>>><>>><<<>>><<>><<<<>><<><<<><<<<>><<<<><>><<<>>>><<<>>>><<>>><>><<>>>><<<>><<<>>>><><<<><<>><>><<>><<>>>><<>>><<<<><<><>>><><<<>>><<>>><<<>>><<<>>>><>>><<<<>>>><<<>>><<>><<<>>><<<>>><>>>><<><<<<>>>><<<><<<<>>><<<<>>><>><<<>>>><<><<><<<>>>><><<<>><<<<><<<>>><>>><>><<><<>><<<<>>>><>>><><<<<>>><<>><<<>>><><<<>>>><<<<>>><<>><<<><<><<<<>>>><<<>>>><<<>>>><><>><<<>>>><<><>>>><<<<>>>><<<>>>><<>>><<<<>>>><>>><>>><<>>>><<<><<>>>><><<<<>><<<>>>><<><<<<>>>><<>>>><><<<>>>><>><<<>>>><<>>><<>>><><<<>>><<<>><><<<<>>><<>>>><>>><<<>>><<>>>><<>><<<<><<>><<<>><<<<>>><>><<<<>>><<<>>>><>>>><<<>>>><>>><<<<>>><>><<<<><<<>><>>><>>>><<>>>><<>><<<>><<>>><<<>><<<<><<>><<<<>><<<<>><<<><>>>><>><><<<><<><>>><<<<><<<>><<>>><>>><<<<>><<<><<<>><>>>><<<<><><<>><<<<>><<<<>><>>>><><<<><>>><<<<>>>><<<>>><<>>>><<<>><<<>><>><<<><<<<>>><<<>>>><<<<>>>><<<>><<<<>>><>><<<<>><><<<<>><><<<<>><<>><<<<>>><>>>><<<<>>>><>>><>><>>>><<<>>>><><<<><<<>><<<<>>><<<<>><<<>>><<<<><<<>>><<<>>><><>>>><<<><<<<><<<>><<<<>>><<><<<<>><>>><<<<>>><>><>>>><><<<>>>><<><>>>><<><<<>>><<>>><<<<><>>><<><<>>><<<>>><><<<>>><>>><<<<>>>><<<>>>><<>>><<<<>>>><<>><<<<>><<<<><<>><<<<><<<>>>><<<><>>>><<>>>><<<>>>><<<>><<<>>><<>>>><>>><<<<>><<<<>><>>><<<<>><<>>><<<<><<<<>><<<<>>><<>><<><<<>><<>>>><<<<>><<<<>>><>>>><<>><>>>><<<><<<<>>><>>>><<<>><<<<>><<>>><<<>><<><>><<><>>>><>>>><<<<><>>><>><<<<>>>><<<>>>><<<>>>><<<>>>><<<><<<>>><<<>><<<<><<<><<>><<<>>>><<<>>>><<<<><>>><<><<<<>>>><>><<>>>><<>>>><>>><<<>>>><<><<<<>>>><>><><<<<>><>>><>>>><<<>>><<<<>>><<<<><<<>>>><>><<<><>>><<<<>>><>><>>><<<>><>><<><<<>><>>>><<><<<>>>><><<<>>>><<>><<>>>><>><><<<<><<<>>>><<<><<<>><<<<>><<><<>><>>>><<<<>>>><>><<<<>>>><<<<><>>>><<<><<<<><>><<>><<<>>><>><<<<>>><><<<>>><>><<>><<>>>><<<<>>><<<>>>><<<<><>><<<><<<><<><<<><<<<>>>><><><<><<>>><<>>><<>><>>><>>>><<><<<><>>><<<<>><<><<>><<<<>><<>>>><<<>>>><>>><<<>>><<<>>><<<>><>><<<<>>>><<>>>><<<>>>><>><<<>>>><<<>>>><<<>>><<>><<>><<<<><<><>><><<>><<>>>><<<>><>>><><<><<<><<>><<>>><<<>>>><<><>>>><<<<><<>>><><<<<>><<<>><<<<><<><<>>><>><>>>><<>>>><<<>>><<>>>><<<<>>>><<<>>>><>>>><>>><<<><>><<><>><<<<>>><<<<>>>><<<<>>>><>><><<<>>>><<<<>><<>>>><<<<><><<<>>>`;

const testinput = `>>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>`;


let visualize = false;
let visualizeDelay = 10000000;
let visualCountOnly = true;

let testing = true;
let part1 = false;
let bottomLimit = 0;
let towerHeight = 0;
let history = { 0: { 0: true, 1: true, 2: true, 3: true, 4: true, 5: true, 6: true } };
let rocks = [1, 2, 3, 4, 5];
let jets;
let rockNumber = 0;
let patternFound = false;
(() => {
    exec(() => {
        jets = parseInput(testing ? testinput : rawinput);
        //console.log(jets);
        for (let i = 0; i < (part1 ? 2022 : 1000000000000); i++) {
            rockNumber = i;
            dropRock();

            if (i % 1000 == 0 && !patternFound) {
                let pattern = findPattern(i);

                if (pattern != null) {
                    console.log('pattern found:', pattern);
                    patternFound = true;

                    let row = reconstructRow(pattern.lastHeight);
                    let remainingTurns = 1000000000000 - pattern.lastTurn;


                    let repeats = Math.floor(remainingTurns / pattern.steps);
                    console.log('pattern can repeat', repeats, 'times');
                    let newHeight = pattern.lastHeight + (repeats * pattern.height);
                    let newTurn = pattern.lastTurn + (repeats * pattern.steps);

                    towerHeight = newHeight;
                    i = newTurn;
                    // reset history to new row
                    history = {};
                    history[towerHeight] = row[1];
                    history[towerHeight + 1] = row[2];
                }

            }
        }
        //console.clear();
        //printHistory();
        console.log(towerHeight);
    });
})();

function dropRock() {
    let falling = true;

    let [num, rock] = getRock();
    //console.log('\n\n\ndropping rock:', rock, '\n');
    while (falling) {

        try {
            rock = moveRock(rock, { y: 0, x: next(jets) });


        } catch {
            //console.log('couldnt move sideways', rock);
        };

        if (visualize) {
            console.clear();
            printState(rock);
            for (let i = 0; i < visualizeDelay; i++);
        }
        try {
            rock = moveRock(rock, { y: -1, x: 0 });


        } catch (e) {
            falling = false;
            // console.log('hit bottom');
        }

        if (visualize) {
            console.clear();
            printState(rock);
            for (let i = 0; i < visualizeDelay; i++);
        }

    }

    //console.log('final position of rock: ', rock);
    recordRock(rock, num);

    findNewTowerHeight();
}

function findNewTowerHeight() {
    let rows = Object.keys(history).map(r => parseInt(r)).reverse();

    for (let y of rows) {
        if (Object.values(history[y]).filter(r => r != false).length > 0) {
            towerHeight = y;
            //console.log('new tower height is', y);
            return;
        }
    }

}

function getRock() {
    let y = towerHeight + 4;

    // return an array of points - rock at starting position
    switch (next(rocks)) {
        case 1: return [1, [{ y: y, x: 2 }, { y: y, x: 3 }, { y: y, x: 4 }, { y: y, x: 5 }]];
        case 2: return [2, [{ y, x: 3 }, { y: y + 1, x: 2 }, { y: y + 1, x: 3 }, { y: y + 1, x: 4 }, { y: y + 2, x: 3 }]];
        case 3: return [3, [{ y: y, x: 2 }, { y: y, x: 3 }, { y: y, x: 4 }, { y: y + 1, x: 4 }, { y: y + 2, x: 4 }]];
        case 4: return [4, [{ y: y, x: 2 }, { y: y + 1, x: 2 }, { y: y + 2, x: 2 }, { y: y + 3, x: 2 }]];
        case 5: return [5, [{ y: y, x: 2 }, { y: y, x: 3 }, { y: y + 1, x: 2 }, { y: y + 1, x: 3 }]];
    }
}

function isOccupied(x, y) {
    return history[y] && (history[y][x] ?? false);
}

function moveRock(rock, dir) {
    //console.log('moving rock: ', rock, dir);
    let newRock = [];
    for (let r of rock) {
        let n = {
            y: r.y + dir.y,
            x: r.x + dir.x,
        };
        // console.log('checking point', r, '=>', n);

        if (n.x > 6 || n.x < 0) {
            //     console.log('already at x-axis limit');
            throw new Error('can\' move');
        }
        if (isOccupied(n.x, n.y)) {
            //    console.log('space occupied');
            throw new Error('can\' move');
        }
        newRock.push({ y: n.y, x: n.x });

    };
    return newRock;
}

function parseInput(input) {
    let rows = Array.from(input).map(i => {
        if (i == '<') return -1;
        if (i == '>') return 1;
    });
    return rows;
}

function next(arr) {
    let n = arr[0];
    arr.push(arr.shift());
    return n;
}

function recordRock(rock, number) {
    let i = 0.1;
    for (let r of rock) {
        if (!history[r.y]) addHistRow(r.y);
        history[r.y][r.x] = (number + i) + ':' + rockNumber;
        i += 0.1;
    }
}

function addHistRow(y) {
    history[y] = {
        0: false,
        1: false,
        2: false,
        3: false,
        4: false,
        5: false,
        6: false,
    };
}

function printHistory() {
    let y = 1;
    let output = ['-------'];
    while (true) {
        let row = history[y++];
        if (!row) break;

        let msg = '';

        for (let i = 0; i < 7; i++) {
            msg += row[i] ? '#' : '.';
        }
        output.push(msg);
    }
    output.reverse();
    output.forEach(o => console.log(o));
}

function printState(rock = []) {
    if (!visualCountOnly) {
        const output = [];
        let start = towerHeight - 10 >= 0 ? towerHeight - 10 : 0;

        for (let y = start; y <= towerHeight + 6; y++) {
            if (y == 0) {
                output.push('-------'); continue;
            }
            if (!history[y]) addHistRow(y);
            let h = history[y];
            let msg = '';
            for (let x = 0; x < 7; x++) {

                if (rock.find(n => n.x == x && n.y == y))
                    msg += '@';
                else
                    msg += h[x] ? '#' : '.';
            }
            output.push(msg);
        }
        output.reverse();
        output.forEach(o => console.log(o));
    }
    console.log('Tower height:', towerHeight);
    console.log("Rocks dropped:", rockNumber + 1);
}


function reconstructRow(rowIndex) {
    let max = rowIndex + 3;
    let min = rowIndex - 3;

    let newHist = {};

    // Find the turns where blocks in this line were dropped
    let turns = Object.values(history[rowIndex]).map(r => {
        return r.split(':')[1];
    }).reduce((a, n) => a.includes(n) ? a : [...a, n], []);

    // Find the rest of the blocks to recreate this row
    for (let i = min; i <= max; i++) {

        let row = history[i];

        for (let x = 0; x < 7; x++) {
            let spot = row[x];

            if (!spot) continue;
            if (turns.includes(spot.split(':')[1])) {
                if (!newHist[i]) newHist[i] = {};
                newHist[i][x] = history[i][x];
            }

        }

    }

    return Object.values(newHist);
}


function findPattern(round) {
    //console.log('finding pattern (round', round + ')');
    let rows = Object.keys(history);

    let completedRows = [];

    for (let i of rows) {
        let row = history[i];
        let iscomplete = Object.values(row).filter(r => r == false).length == 0 && i != 0;

        if (iscomplete) completedRows.push({ i, row });

    }
    let possiblePatternsRaw = completedRows.reduce((candidates, cr) => {
        let matches = completedRows.filter(cr2 => {
            // Rows with different id with exact match
            return (
                isRowMatch(cr, cr2)
                // hasn't been recorded already
                && candidates.filter(rr => {
                    for (let i = 0; i < rr.length - 1; i++) {
                        if (rr[i] == cr.i) return true;
                    }
                }
                ).length == 0
            );
        });

        if (matches.length > 0) {
            candidates.push([parseInt(cr.i), ...matches.map(r => parseInt(r.i))]);
        }
        return candidates;
    }, []);

    //console.log('possible patterns found:', patternCandidates.length);

    // find patterns where complete rows repeat at same tower height intervals
    let patternCandidatesByHeight = possiblePatternsRaw.filter(p => isPattern(p));

    // map tower height patterns to turns
    let patternCandidates = patternCandidatesByHeight.map(p => {
        return p.map(r => getMaxTurnForRow(r));
    }).filter(p => isPattern(p));

    //console.log(patternCandidates.length, 'unique patterns found');
    //console.log(patternCandidates);

    if (patternCandidates.length == 0) return null;
    let turnStep = patternCandidates[0][1] - patternCandidates[0][0];
    let heightStep = patternCandidatesByHeight[0][1] - patternCandidatesByHeight[0][0];
    let lastHeight = patternCandidatesByHeight[0][patternCandidatesByHeight[0].length - 1];
    let lastTurn = patternCandidates[0][patternCandidates[0].length - 1];
    return {
        lastHeight,
        lastTurn,
        steps: turnStep,
        height: heightStep
    };
}

function isPattern(p) {
    if (p.length < 3) return false;

    let step = p[1] - p[0];

    let isPattern = true;
    for (let i = 1; i < p.length - 1; i++) {
        if (p[i] + step != p[i + 1]) isPattern = false;
    }

    return isPattern;
}

function getMaxTurnForRow(index) {
    let max = 0;
    let row = history[index];
    console.log('getting max turn for row', index, ':', history[index]);
    for (let r of Object.values(row)) {
        let turn = parseInt(r.split(':')[1]);
        if (turn > max) max = turn;
    }
    //console.log('finding max turn for row at index', index, row, '\nmax', max);

    return max;
}

function isRowMatch(row1, row2) {
    return (
        row1.i != row2.i
        && parseInt(row1.i) < parseInt(row2.i)
        && row1.row[0].split(':')[0] == row2.row[0].split(':')[0]
        && row1.row[1].split(':')[0] == row2.row[1].split(':')[0]
        && row1.row[2].split(':')[0] == row2.row[2].split(':')[0]
        && row1.row[3].split(':')[0] == row2.row[3].split(':')[0]
        && row1.row[4].split(':')[0] == row2.row[4].split(':')[0]
        && row1.row[5].split(':')[0] == row2.row[5].split(':')[0]
        && row1.row[6].split(':')[0] == row2.row[6].split(':')[0]
    );
}


function pause(time = 1) {
    for (let i = 0; i < time * 1000000000; i++);
}