import { exec } from "./base.js";

const testinput = `R 4
U 4
L 3
D 1
R 4
D 1
L 5
R 2`;

const testinput2 = `R 5
U 8
L 8
D 3
R 17
D 10
L 25
U 20`;

const rawinput = `D 1
U 2
R 2
U 1
R 1
U 2
L 2
D 1
L 2
R 1
L 1
R 1
U 2
D 2
L 2
R 2
L 2
R 1
L 1
D 1
U 1
R 1
U 2
D 1
U 1
D 1
R 2
D 1
U 1
R 1
L 2
R 2
U 2
R 2
L 2
R 2
U 2
D 2
R 1
U 2
D 2
U 2
D 1
L 1
D 1
L 1
R 2
D 2
R 2
D 1
R 2
L 1
R 1
L 2
D 2
U 1
D 1
R 2
L 2
D 2
L 2
D 2
L 1
R 2
L 1
D 1
L 2
D 1
U 1
R 1
U 1
R 2
D 2
R 1
U 2
D 1
L 2
D 2
L 1
D 1
L 1
D 1
R 1
L 1
U 1
D 2
U 1
D 2
R 1
D 2
L 2
U 1
L 1
R 1
D 1
U 1
D 1
R 1
U 2
L 1
D 1
U 2
R 2
D 2
R 1
D 1
R 1
L 1
R 2
U 1
D 1
L 1
U 3
L 2
U 2
L 2
D 2
L 1
R 3
D 1
U 1
L 3
D 3
U 1
L 2
U 1
R 2
U 3
D 2
L 3
U 2
R 2
D 2
U 1
R 1
L 3
D 2
L 3
D 1
U 3
R 3
U 3
D 3
U 3
L 3
U 1
D 1
U 1
D 3
R 3
D 3
U 3
R 3
L 3
R 2
U 3
D 3
L 1
R 2
D 2
U 1
R 1
L 2
D 3
R 3
D 1
U 1
D 1
U 2
D 1
R 1
D 2
R 2
L 1
D 2
L 1
R 2
L 3
R 3
L 1
U 3
R 3
U 3
D 1
L 3
R 1
L 1
R 2
L 1
U 2
R 1
D 2
R 3
L 3
R 2
U 3
R 3
L 1
R 1
L 1
U 1
L 2
R 2
L 3
D 2
L 2
R 3
D 3
U 1
L 2
D 3
U 3
D 3
R 1
U 1
L 2
U 1
L 1
R 1
U 3
L 2
R 1
D 4
R 3
D 3
L 3
D 4
R 4
L 3
R 2
D 2
R 4
U 2
D 3
L 1
R 2
U 4
R 3
D 2
U 1
D 4
R 1
D 3
U 3
L 2
R 2
L 3
R 3
L 4
D 3
L 2
U 3
L 1
R 2
D 4
R 3
U 3
L 2
U 3
D 2
L 4
D 4
L 4
U 4
R 1
D 1
R 3
U 3
R 3
D 3
L 1
U 1
R 3
L 2
R 2
D 2
R 4
U 4
L 4
D 3
L 2
R 4
L 2
D 1
L 2
R 4
U 2
L 2
U 3
L 4
R 2
L 4
D 2
L 1
D 4
L 3
U 2
D 1
R 4
U 2
D 1
R 4
D 4
U 3
R 3
U 4
L 1
D 3
U 1
D 3
R 2
U 1
R 3
L 4
R 1
L 4
D 3
R 4
U 2
L 1
D 4
L 2
R 4
L 2
R 3
L 3
U 2
R 3
L 2
R 1
D 4
L 3
D 3
L 5
D 1
R 3
D 4
L 4
R 2
D 5
R 2
L 2
D 5
U 2
D 1
U 2
D 3
L 2
D 1
L 3
U 1
D 3
R 2
U 4
R 5
D 5
U 3
R 1
D 5
U 1
D 4
R 1
U 4
D 4
R 4
U 5
D 4
R 1
L 1
D 5
L 1
D 4
U 1
D 2
U 1
D 1
R 1
D 2
R 2
D 1
L 5
R 3
L 4
D 3
R 5
D 4
U 2
R 2
U 2
D 2
U 5
L 4
D 5
L 5
R 3
D 2
U 4
D 2
L 3
R 2
L 1
U 2
R 4
L 5
R 4
D 1
U 5
D 4
L 5
R 2
U 4
D 3
L 3
D 3
L 1
U 5
L 4
R 1
U 5
D 4
R 2
L 1
D 2
R 3
L 2
R 5
D 5
R 2
L 1
U 3
D 2
L 1
U 1
R 4
U 1
D 1
U 1
R 2
U 3
R 4
L 4
R 1
U 3
R 3
D 1
L 3
R 4
L 1
U 5
D 6
U 2
L 4
D 2
U 1
D 4
R 5
L 2
R 6
L 6
U 1
D 4
L 3
D 5
U 4
L 4
R 2
D 2
L 3
D 1
U 6
L 6
R 2
D 2
U 3
L 6
R 1
U 5
R 5
U 5
D 1
L 2
U 1
R 1
D 5
L 6
R 1
D 4
R 3
L 3
D 2
U 5
D 6
U 3
D 6
U 4
L 2
R 1
U 5
D 2
L 1
D 4
U 1
R 2
L 2
R 4
D 1
L 6
D 5
L 6
R 6
L 3
U 5
R 4
D 4
L 3
D 2
L 1
R 4
U 3
R 2
U 2
R 5
D 1
U 5
D 4
R 4
L 5
D 5
U 3
R 1
U 4
L 5
U 1
D 2
U 4
D 4
L 1
U 2
L 3
U 5
R 1
L 5
U 1
R 4
D 2
L 6
U 6
R 6
U 5
R 6
U 6
L 5
U 1
L 5
D 3
R 1
D 4
L 3
D 7
U 1
D 4
R 2
U 4
D 4
U 7
D 3
L 3
D 3
R 4
D 7
R 4
D 5
U 3
L 5
R 5
D 5
L 2
R 3
L 2
R 4
U 2
L 4
U 7
L 2
U 6
D 3
U 6
R 2
D 2
U 6
L 2
R 4
U 5
D 2
R 4
L 2
D 2
R 1
D 3
R 1
D 3
U 4
D 2
L 4
D 1
L 5
U 1
R 2
D 3
U 4
D 4
L 5
R 2
D 2
U 1
D 7
L 7
R 2
L 6
D 4
R 7
L 3
U 2
D 2
U 4
L 5
D 4
U 4
R 5
L 5
D 2
R 5
L 7
U 1
D 7
L 3
R 4
L 5
D 5
L 2
R 5
L 3
R 2
L 4
R 1
D 3
L 5
R 2
D 4
U 3
R 3
L 5
D 3
R 1
D 5
R 5
L 1
D 6
R 5
D 4
U 2
L 4
U 1
D 3
L 2
D 7
R 4
L 1
U 6
R 8
L 2
U 2
R 1
U 7
D 6
L 7
R 3
U 5
R 4
L 8
D 2
R 4
U 8
L 6
R 1
L 7
D 5
L 3
R 6
U 1
D 7
L 2
U 7
R 1
U 6
L 3
R 8
D 5
L 4
R 4
L 6
D 6
R 3
L 2
U 5
R 3
D 1
R 7
L 1
U 8
D 2
U 3
D 1
L 2
U 6
L 1
U 4
R 6
U 7
R 1
D 1
U 8
R 1
D 7
L 1
U 4
D 1
U 2
R 8
U 1
D 6
R 1
U 1
R 5
L 7
R 3
D 3
U 8
L 6
D 7
U 8
L 4
R 1
L 7
U 4
D 3
L 3
R 6
D 3
U 8
L 5
D 8
L 1
U 7
R 6
L 5
U 8
R 2
L 8
R 7
L 8
U 7
D 7
U 3
D 4
U 8
D 5
U 3
L 4
D 4
U 8
R 7
U 7
L 7
R 4
L 1
D 8
R 9
D 4
R 8
L 5
R 9
U 5
D 1
L 5
D 7
U 3
R 5
U 1
R 3
U 2
D 9
U 5
R 3
U 4
R 3
D 4
U 7
D 9
L 7
D 3
U 1
R 3
U 4
L 3
R 8
L 3
U 8
R 6
L 6
D 7
L 7
D 4
L 3
U 5
L 2
R 5
D 3
U 6
L 9
R 9
D 9
U 9
R 4
D 8
R 8
D 5
L 7
U 2
R 4
L 8
R 4
L 2
R 3
L 7
R 1
U 1
L 5
D 5
R 9
D 8
U 7
L 3
R 5
D 1
U 1
R 5
D 6
U 9
D 8
R 4
D 7
L 1
U 5
D 8
L 4
D 4
L 7
D 8
R 5
U 9
D 2
L 1
R 2
U 8
D 4
L 6
D 1
L 5
D 6
R 9
U 1
L 9
U 4
D 6
R 8
L 5
R 1
L 2
R 7
D 8
L 4
R 3
U 2
L 7
U 2
D 1
R 8
U 8
L 1
R 1
D 2
U 3
L 5
D 6
L 3
U 6
R 2
L 5
U 6
L 5
D 3
L 6
D 2
L 4
U 10
R 4
D 7
U 4
D 4
L 5
U 3
L 9
R 7
D 1
L 4
U 4
D 5
R 5
D 4
U 1
D 3
R 1
L 6
U 1
D 1
L 4
U 5
D 10
R 4
U 5
R 1
U 2
R 4
D 6
L 7
U 1
R 2
D 1
L 7
D 4
U 9
L 6
D 8
R 3
U 7
R 8
U 2
D 5
R 3
U 10
D 3
R 3
U 1
R 8
D 10
R 3
D 1
U 10
L 5
U 8
D 6
L 9
D 5
U 1
R 9
U 3
D 3
R 8
L 9
D 8
U 3
R 2
D 3
L 7
D 3
R 10
L 9
U 2
R 8
U 8
R 5
U 3
L 9
U 1
D 7
L 7
R 5
L 8
U 8
L 9
R 10
U 1
R 5
L 5
D 7
L 8
D 5
U 4
L 4
U 6
D 4
L 8
U 8
L 10
D 1
L 2
D 3
U 8
L 7
R 7
U 6
D 4
U 8
L 2
R 6
L 7
D 11
R 4
D 9
L 10
U 3
L 9
U 10
L 11
U 11
D 2
U 4
D 5
L 11
D 4
L 6
U 2
D 8
R 4
U 4
D 5
U 8
L 3
U 2
R 7
U 10
R 5
L 3
R 11
U 2
D 8
U 3
R 10
U 10
L 3
R 7
L 8
D 5
U 9
D 9
R 3
U 4
L 6
D 9
R 10
L 2
R 8
U 11
L 2
R 1
U 11
R 2
D 3
U 9
R 3
L 2
R 1
L 6
R 10
L 2
U 6
R 4
L 9
U 11
L 1
R 11
U 8
L 4
R 11
L 6
D 5
L 11
U 3
D 5
R 5
U 2
L 3
R 4
L 9
R 7
U 11
R 7
U 7
D 10
R 11
D 10
L 3
D 5
U 2
L 1
U 2
R 2
U 8
R 1
L 10
R 10
U 5
D 4
U 4
R 4
L 8
R 6
U 9
R 5
L 3
U 9
L 3
D 4
R 10
D 11
L 12
R 1
U 11
L 10
R 11
D 10
R 10
L 4
U 11
D 2
R 8
L 6
U 7
D 7
L 12
U 1
L 3
D 8
R 6
L 7
R 11
L 2
R 6
U 2
R 2
L 2
U 5
R 12
U 12
D 12
U 1
D 6
L 5
U 3
D 3
L 4
R 10
L 5
U 2
D 8
R 4
D 5
L 7
U 2
R 10
D 12
R 9
U 11
D 10
R 4
U 2
D 1
U 10
D 8
R 2
L 9
D 12
U 12
D 2
U 8
R 5
L 8
D 5
U 9
D 8
U 7
R 3
L 10
U 11
L 5
U 12
L 2
U 9
D 7
R 12
U 9
R 2
L 3
U 10
D 9
L 7
U 5
R 3
D 3
L 11
D 1
R 5
L 1
U 5
L 6
D 8
L 2
D 5
U 8
D 9
R 8
L 7
D 6
L 6
D 1
U 5
L 4
R 6
U 9
L 3
U 3
D 7
L 1
D 4
L 9
R 9
U 6
D 8
U 12
L 5
D 4
R 7
L 2
D 4
U 7
R 7
U 2
R 13
D 5
L 1
R 5
D 6
U 2
L 1
U 5
D 2
R 9
L 8
U 9
D 9
U 12
R 10
U 9
L 13
R 5
D 10
L 9
U 4
D 12
U 12
R 13
D 12
U 7
R 12
D 8
L 8
U 2
D 10
L 2
D 5
U 3
R 11
D 4
R 4
L 1
R 1
D 9
U 6
R 10
U 12
L 10
R 13
D 7
R 12
L 5
R 10
D 4
R 11
L 7
R 7
U 7
D 7
U 11
L 3
R 9
L 12
D 11
R 5
D 5
R 7
D 7
U 3
L 11
D 11
L 10
U 7
L 13
R 6
L 10
U 10
D 10
L 4
R 5
U 5
D 2
L 6
D 8
U 1
R 12
D 11
U 3
L 9
R 10
U 8
R 10
D 2
R 3
U 9
D 7
L 6
R 9
D 2
U 11
R 3
D 1
R 4
L 11
U 13
R 12
U 12
R 8
L 13
U 7
D 10
R 11
L 2
U 9
L 3
R 5
L 4
R 11
D 5
R 1
L 11
U 10
R 4
L 1
U 2
D 8
L 7
U 1
L 4
D 1
R 1
L 11
U 8
R 11
U 4
R 10
L 6
D 7
U 9
L 14
U 1
R 10
U 12
R 1
L 6
D 9
U 10
L 10
D 5
R 14
U 3
R 13
U 3
L 13
U 8
L 10
U 7
R 12
U 11
R 6
U 6
D 6
R 2
L 7
R 8
U 8
D 3
R 8
L 12
U 11
D 9
U 6
R 8
D 8
U 9
R 12
L 11
U 10
L 14
R 9
D 8
U 14
L 9
D 11
U 2
R 2
U 4
R 7
U 11
L 8
D 12
L 11
U 13
L 1
D 8
U 8
L 10
U 12
R 11
U 3
D 12
L 1
D 8
L 4
D 3
L 2
U 8
D 9
L 1
U 9
D 15
U 5
L 9
D 2
U 4
L 2
U 15
L 8
R 2
U 1
L 3
D 10
L 15
U 2
R 14
D 1
U 13
D 4
R 8
D 6
R 5
D 13
L 5
R 6
U 14
L 15
D 15
U 12
L 1
D 3
L 6
D 2
R 4
D 10
U 12
R 13
L 3
R 15
D 13
U 15
D 14
U 8
D 10
U 5
D 11
R 15
D 7
R 1
D 2
L 5
U 11
L 14
U 9
D 13
R 12
U 10
R 11
D 9
R 6
D 7
L 7
U 14
D 12
L 6
D 15
U 11
R 1
U 3
L 11
R 3
L 9
R 9
L 11
R 12
U 6
R 13
D 13
L 9
U 3
D 6
L 4
D 3
U 15
D 13
U 9
D 1
U 13
D 12
L 4
U 6
R 11
D 2
R 7
U 9
R 11
U 3
L 7
U 4
R 2
D 14
U 3
D 14
R 13
L 4
R 1
U 12
D 10
L 8
D 2
L 15
U 1
D 4
U 16
R 15
D 1
R 8
U 14
L 12
U 2
R 1
D 16
L 10
R 11
D 10
L 15
R 7
U 10
L 3
U 11
D 1
L 5
D 3
U 8
R 3
U 5
R 2
D 11
L 2
D 7
L 2
U 3
L 12
D 13
L 12
U 7
R 11
L 4
R 11
L 8
U 16
L 1
R 11
L 4
U 15
L 16
R 15
U 6
R 4
U 3
D 16
R 9
U 8
R 5
U 6
L 2
R 2
D 10
R 7
D 13
U 13
R 14
D 3
L 15
R 3
D 11
L 4
U 12
D 1
U 8
R 8
L 4
D 6
L 15
U 7
D 15
L 11
U 14
D 8
U 15
L 12
R 6
U 13
R 5
U 2
L 1
R 13
D 10
R 7
L 9
U 14
R 1
D 13
L 11
U 9
L 13
R 5
D 14
R 16
U 5
D 9
R 2
D 5
R 8
L 8
U 16
D 12
R 3
U 3
D 5
U 12
D 14
L 9
U 12
R 6
L 9
U 3
D 16
U 15
R 6
D 11
R 10
D 3
U 16
L 11
R 2
L 2
R 9
D 12
L 8
D 8
R 13
L 5
D 17
L 7
D 10
U 13
L 11
U 17
L 13
R 2
D 6
R 14
D 14
L 15
R 8
D 4
U 7
L 6
R 6
U 7
D 12
R 9
L 8
D 15
L 14
R 1
U 8
L 13
D 16
R 2
U 2
L 2
D 13
U 8
D 6
U 10
L 9
R 2
L 7
U 5
R 6
U 12
D 3
R 1
U 4
R 17
U 11
L 3
U 13
L 12
U 6
R 5
D 12
R 4
U 4
R 3
D 11
U 7
L 10
D 12
U 12
D 9
R 4
L 2
R 9
L 13
D 16
L 14
D 5
L 8
D 6
L 13
U 1
R 7
U 5
R 2
U 11
L 10
D 14
R 11
L 5
D 16
U 9
D 3
U 11
D 1
U 5
D 3
U 8
L 1
D 1
U 5
L 17
D 9
L 14
R 8
D 15
R 10
U 4
R 1
U 3
R 5
L 13
D 6
L 15
U 10
L 5
R 14
L 1
R 6
D 10
L 13
D 3
L 1
U 10
D 6
R 16
D 6
R 4
D 9
U 9
D 4
R 1
D 10
R 7
D 14
R 10
D 14
U 14
D 15
R 11
L 16
D 18
R 6
U 8
D 18
R 18
D 14
U 9
R 18
U 14
L 18
U 1
R 14
D 1
U 6
R 3
L 13
D 4
L 9
D 2
U 5
D 6
U 9
L 13
U 12
R 11
D 17
U 17
L 8
U 15
R 16
L 9
D 2
R 16
D 2
L 9
D 9
R 15
D 10
L 12
R 14
L 4
R 17
D 15
U 16
R 7
D 4
U 4
L 7
D 16
R 11
D 2
U 2
L 7
U 15
L 5
U 14
L 7
U 15
D 9
L 14
D 13
U 11
R 10
U 15
L 5
U 16
D 13
U 15
L 18
R 1
D 17
U 18
R 19
L 4
R 15
U 12
D 19
R 5
D 18
L 14
U 5
L 4
R 6
U 15
L 7
R 11
L 15
U 12
D 3
R 14
U 1
L 4
R 3
U 15
L 15
R 6
L 3
U 2
D 6
L 6
D 16
L 19
U 9
L 2
R 13
U 8
R 17
D 17
L 4
R 2
L 7
R 11
D 5
L 14
D 7
R 13
D 2
L 18
U 11
R 2
D 18
U 2
D 6
L 4
U 2
L 15
R 4
D 8
R 1
U 16
L 4
R 5
U 16
D 14
U 2
D 19
L 6
D 14
U 17
L 3
R 11
L 2
R 11
U 11
D 4
U 13
L 6
U 14
D 17
U 15
D 7
R 8
U 3
R 15
D 17
U 16
R 3
D 17
L 9
U 15
R 15
L 11
R 18
D 16
R 17
D 3
L 17
D 4
L 10
U 2
R 2
D 9
L 17
R 19`;

const newRope = (len = 2) => {
    let rope = [];
    for (let i = 0; i < len; i++) {
        rope.push({ x: 0, y: 0 });
    }
    return rope;
};

const getUniquePositions = (input = []) => {
    return input.reduce((acc, i) => {
        if (acc.filter(a => a.x == i.x && a.y == i.y).length == 0) acc.push(i);
        return acc;
    }, []);
};

const getDir = (dir) => {
    switch (dir) {
        case 'U': return { x: 0, y: -1 };
        case 'D': return { x: 0, y: 1 };
        case 'R': return { x: 1, y: 0 };
        case 'L': return { x: -1, y: 0 };
    }
};

const isAdjacent = (p1, p2) => {
    for (let y = p1.y - 1; y <= p1.y + 1; y++) {
        for (let x = p1.x - 1; x <= p1.x + 1; x++) {
            if (x == p2.x && y == p2.y) return true;
        }
    }
    return false;
};

const moveNode = (nd, dir) => {
    nd.x += dir.x;
    nd.y += dir.y;
    return nd;
};

const moveTail = (head, tail) => {
    if (isAdjacent(head, tail)) {
        //console.log('tail is adjacent to head');
        return;
    }

    let diff = { x: head.x - tail.x, y: head.y - tail.y };
    //console.log(' .   diff', diff);
    // Move sideways
    if (Math.abs(diff.x) == 2) {
        // Move diagonal
        if (diff.y != 0) {
            tail.x += diff.x > 0 ? 1 : -1;
            tail.y += diff.y > 0 ? 1 : -1;
        }
        else {
            tail.x += diff.x > 0 ? 1 : -1;
        }

    }
    // Move vertical
    else if (Math.abs(diff.y) == 2) {

        //diag
        if (diff.x != 0) {
            tail.y += diff.y > 0 ? 1 : -1;
            tail.x += diff.x > 0 ? 1 : -1;
        }
        else {
            tail.y += diff.y > 0 ? 1 : -1;
        }
    }

};

const printRopeState = (rope = [], hist = []) => {
    let bounds = hist.reduce((acc, n) => {
        if (n[0].x < acc.x.min) acc.x.min = n[0].x;
        if (n[0].x > acc.x.max) acc.x.max = n[0].x;
        if (n[0].y < acc.y.min) acc.y.min = n[0].y;
        if (n[0].y > acc.y.max) acc.y.max = n[0].y;
        return acc;
    }, {
        x: { min: 100, max: -100 },
        y: { min: 100, max: -100 },
    });

    // let bounds = {
    //     x: { min: rope[0].x - 20, max: rope[0].x + 20 },
    //     y: { min: rope[0].y - 20, max: rope[0].y + 20 }
    // };

    let tailPositions = hist.map(h => { return h[h.length - 1]; });
    let msg = '';
    for (let y = bounds.y.min; y <= bounds.y.max; y++) {
        for (let x = bounds.x.min; x <= bounds.x.max; x++) {
            let index = getUniquePositions(rope).findIndex(r => r.x == x && r.y == y);
            if (index == -1) {
                if (tailPositions.filter(t => t.x == x && t.y == y).length > 0) msg += ' ';
                else msg += '.';
            }
            else msg += index == 0 ? 'H' : index;
        }
        msg += '\n';
    }
    console.log(msg);
};


const simulateRope = (cmds, rope) => {
    let hist = [];
    for (let n = 0; n < cmds.length; n++) {
        let cmd = cmds[n];
        //      console.log('moving', cmd.amount, 'spaces', cmd.dir);
        for (let i = 0; i < cmd.amount; i++) {
            let state = [];
            for (let r = 0; r < rope.length; r++) {
                if (r == 0) rope[r] = moveNode(rope[r], getDir(cmd.dir));
                else moveTail(rope[r - 1], rope[r]);
                //console.log(rope[r]);
                state.push({ ...rope[r] });

            }
            printRopeState([...rope], [...hist]);
            for (let p = 0; p < 100000000; p++);
            console.clear();
            hist.push(state);
        }
    };
    return hist;
};


const parseInput = (input) => {
    return input.split('\n').map(r => {
        let [dir, amt] = r.split(' ');
        return { amount: amt, dir };
    });
};



const printRopeHistory = (hist = []) => {
    let bounds = hist.reduce((acc, n) => {
        if (n[0].x < acc.x.min) acc.x.min = n[0].x;
        if (n[0].x > acc.x.max) acc.x.max = n[0].x;
        if (n[0].y < acc.y.min) acc.y.min = n[0].y;
        if (n[0].y > acc.y.max) acc.y.max = n[0].y;
        return acc;
    }, {
        x: { min: 100, max: -100 },
        y: { min: 100, max: -100 },
    });


    let tailPositions = hist.map(h => { return h[h.length - 1]; });

    for (let y = bounds.y.min; y <= bounds.y.max; y++) {
        let msg = '';
        for (let x = bounds.x.min; x <= bounds.x.max; x++) {
            let pos = { x, y };
            //console.log('considering', pos);
            if (tailPositions.filter(t =>
                t.x == x && t.y == y
            ).length > 0) {
                msg += '#';
            }
            else msg += '.';
        }
        console.log(msg);
    }
};


(() => {
    exec(() => {

        let cmds = parseInput(rawinput);

        let output = simulateRope(cmds, newRope(10));

        console.log(
            getUniquePositions(output.map(o => { return o[o.length - 1]; })).length
        );

        printRopeHistory(output);

    });
})();